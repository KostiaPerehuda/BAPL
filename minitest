#{#}   # empty long comment

# To ease checking, any print of a non-zero value indicates an error,
# except for the final 1000, which signals that the program ran until
# its end.
#

function main ();   # forward declaration
function main ();   # Ok to repeat


# Expressions
function test1 () {
  var _x_1;
  var y__2;
  #{
     a long comment
  #}
  #
  {_x_1 = (0.5 + .5) * 5.E+00 + 4e0 + -700.0e-2 ; ;; };

  {
    y__2 =   ((3 >= 2) + (3 <= 2) + (3 == 2)
         + (3 != 2) + (3 < 2) + (3 > 2))
  };

  return _x_1 - y__2 + 1 * !!10;;

}


function test2();

function test3(a, b, c);


# logical operators
function test3 (a, b, c) {
  var x = a and b;
  x = x + (a or undef + 1);   # short circuit avoids the error
  x = x + (a and 2 * a or 30);   # check priorities
  x = x + (!!0 and 200 or 2 * 100 + 100);
  return x - c
}


# arrays
function test4 () {
  var a = new [10];
  var i = 1; while i <= 10 { a[i] = i^2; i = i + 1 };

  var sum = 0;
  i = 10; while i >= 1 { sum = sum + a[i]; i = i - 1 };

  i = 1; while i <= 10 { a[i] = new [10]; i = i + 1 };
  a[1][7] = 14; a[7][2] = -23; a[4][2] = a;
  nresults = nresults + 1;
  results[nresults] = a[4][2][4][2][10 - 9][2*3 + 1] +
                      a[7 or 23][1 and 2] - sum + 394;

  a = new [2][2][3];
  i = 1;
  while i <= 2 {
    j = 1;
    while j <= 2 {
      k = 1;
      while k <= 3 {
        a[i][j][k] = 0;
        k = k + 1
      };
      j = j + 1
    };
    i = i + 1
  };
  return a
}


# local variables and parameters
function id (x);

function fact (n) {
  if n <= 1 { return 1 }
  else { var n1 = n - 1; return n * id(fact(n1)) }
}


function id (x) {
   var x = x;
   { var x = x;   # Ok to redefine variable in an inner block
     return x
   }
}


function main () {
  results = new [20];
  nresults = 0;

  nresults = nresults + 1;
  results[nresults] = test1();

  nresults = nresults + 1;
  results[nresults] = test2();


  nresults = nresults + 1;
  results[nresults] = test3(10, 20, 350);

  var a = test4();
  nresults = nresults + 1;
  results[nresults] = a;

  nresults = nresults + 1;
  results[nresults] = fact(6) - 720;

  @results;

  return 1000
}


# control structures
function test2 () {
  i = 1;
  sum = 0;
  while i <= 4 {
    if i % 2 == 1 {
      sum = sum + i;
    }
    elseif (i % 2) == 0 {
      sum = sum + i * 2
    }
    else { @undef + 1 };   # force an error in this case
    i = i + 1
  };

  return sum - 16
}
